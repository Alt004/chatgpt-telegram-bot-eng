import telebot
import openai
from dotenv.main import load_dotenv
import json
import os
import datetime
import time

from telebot.util import extract_arguments


MODEL = "gpt-3.5-turbo"
MAX_REQUEST_TOKENS = 1800
DEFAULT_SYSTEM_PROMPT = "You are a helpful assistant named –ú–∞–≥–¥—ã—á."

PRICE_1K = 0.002  # price per 1k tokens in USD
DATE_FORMAT = "%d.%m.%Y %H:%M:%S"  # date format for logging

NEW_USER_BALANCE = 20000  # balance for new users
REFERRAL_BONUS = 10000  # bonus for inviting a new user

# load .env file with secrets
load_dotenv()

# Load OpenAI API credentials from .env file
openai.api_key = os.getenv("OPENAI_API_KEY")

# Create a new Telebot instance
bot = telebot.TeleBot(os.getenv("TELEGRAM_API_KEY"))

# –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤ –ª—Å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ª–æ–≥–∏
ADMIN_ID = int(os.getenv("ADMIN_ID"))


# File with users and global token usage data
DATAFILE = "data.json"
BACKUPFILE = "data-backup.json"

# Default values for new users, who are not in the data file
DEFAULT_DATA = {"requests": 0, "tokens": 0, "balance": NEW_USER_BALANCE,
                "name": "None", "username": "None", "lastdate": "11-09-2001 00:00:00"}


"""======================FUNCTIONS======================="""


# Function to check if the user is in the data file
def is_user_exists(user_id: int) -> bool:
    if user_id in data:
        return True
    else:
        return False


# Function to check if the user is in the blacklist
def is_user_blacklisted(user_id: int) -> bool:
    if user_id in data and "blacklist" in data[user_id]:
        return data[user_id]["blacklist"]
    else:
        return False


# Function to add new user to the data file
def add_new_user(user_id: int, name: str, username: str, referrer=None) -> None:
    data[user_id] = DEFAULT_DATA.copy()
    data[user_id]["name"] = name

    if username is not None:
        data[user_id]["username"] = '@'+username
    else:
        data[user_id]["username"] = "None"

    if referrer is not None:
        data[user_id]["balance"] += REFERRAL_BONUS
        data[user_id]["ref_id"] = referrer


# Function to update the JSON file with relevant data
def update_json_file(new_data, file_name=DATAFILE) -> None:
    with open(file_name, "w", encoding='utf-8') as file:
        json.dump(new_data, file, ensure_ascii=False, indent=4)


# Function to get the user's prompt
def get_user_prompt(user_id: int) -> str:
    if data[user_id].get("prompt") is None:
        return DEFAULT_SYSTEM_PROMPT
    else:
        return str(data[user_id]["prompt"])


# Function to call the OpenAI API and get the response
def call_chatgpt(user_request: str, prev_answer=None, system_prompt=DEFAULT_SYSTEM_PROMPT):
    messages = [{"role": "system", "content": system_prompt}]

    if prev_answer is not None:
        messages.extend([{"role": "assistant", "content": prev_answer},
                         {"role": "user", "content": user_request}])
        print("\n–ó–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ü§©")
    else:
        messages.append({"role": "user", "content": user_request})
        print("\n–ó–∞–ø—Ä–æ—Å –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

    return openai.ChatCompletion.create(
        model=MODEL,
        max_tokens=MAX_REQUEST_TOKENS,
        messages=messages
    )


"""========================SETUP========================="""


# Check if the file exists
if os.path.isfile(DATAFILE):
    # Read the contents of the file
    with open(DATAFILE, "r", encoding='utf-8') as f:
        data = json.load(f)

    # Convert keys to integers (except for the first key)
    for key in list(data.keys())[1:]:
        data[int(key)] = data.pop(key)
else:
    data = {"global": {"requests": 0, "tokens": 0},
            ADMIN_ID: {"requests": 0, "tokens": 0, "balance": 777777,
                       "name": "–ê–î–ú–ò–ù", "username": "@admin", "lastdate": "01-05-2023 00:00:00"}}
    # Create the file with default values
    update_json_file(data)


# Calculate the price per token in cents
PRICE_CENTS = PRICE_1K / 10

# Session token and request counters
session_tokens, request_number = 0, 0


"""====================ADMIN_COMMANDS===================="""


# Define the handler for the admin /data command
@bot.message_handler(commands=["data"])
def handle_data_command(message):
    target_user_string = extract_arguments(message.text)
    not_found_string = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.\n" \
                       "–£–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/data`"

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
    if message.from_user.id != ADMIN_ID:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É")
        return
    elif message.chat.type != "private":  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º (—á—Ç–æ–±—ã –Ω–µ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ)
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return

    if target_user_string == '':  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª
        bot.send_message(ADMIN_ID, f"–ö–æ–ø–∏—è —Ñ–∞–π–ª–∞ `{DATAFILE}`:", parse_mode="MARKDOWN")
        bot.send_document(ADMIN_ID, open(DATAFILE, "rb"))
        print("\n–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É")
        return

    elif target_user_string[0] == "@":  # –ü–æ–∏—Å–∫ –ø–æ @username
        for user_id in list(data.keys())[2:]:
            if data[user_id]["username"] == target_user_string:
                bot.send_message(ADMIN_ID, json.dumps(data[user_id], ensure_ascii=False, indent=4))
                return
        bot.send_message(ADMIN_ID, not_found_string, parse_mode="MARKDOWN")

    elif target_user_string.isdigit():  # –ü–æ–∏—Å–∫ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_string = int(target_user_string)
        if target_user_string in data:
            bot.send_message(ADMIN_ID, json.dumps(data[target_user_string], ensure_ascii=False, indent=4))
            return
        bot.send_message(ADMIN_ID, not_found_string, parse_mode="MARKDOWN")

    else:
        bot.send_message(ADMIN_ID, not_found_string, parse_mode="MARKDOWN")


# Define the handler for the admin /refill command
@bot.message_handler(commands=["refill"])
def handle_refill_command(message):
    wrong_input_string = "–£–∫–∞–∂–∏—Ç–µ @username/id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n\n" \
                         "–ü—Ä–∏–º–µ—Ä: `/refill @username 1000`"

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
    if message.from_user.id != ADMIN_ID:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É")
        return
    elif message.chat.type != "private":  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö")
        return

    try:
        target_user, amount = extract_arguments(message.text).split()
        amount = int(amount)
    except ValueError:
        bot.send_message(ADMIN_ID, wrong_input_string, parse_mode="MARKDOWN")
        return

    not_found_string = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    success_string = f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤"

    if target_user[0] == '@':
        for user_id in list(data.keys())[2:]:
            if data[user_id]["username"] == target_user:
                data[user_id]["balance"] += amount
                update_json_file(data)
                bot.send_message(ADMIN_ID, success_string)
                return
        bot.send_message(ADMIN_ID, not_found_string)

    elif target_user.isdigit():
        if int(target_user) in data:
            data[int(target_user)]["balance"] += amount
            update_json_file(data)
            bot.send_message(ADMIN_ID, success_string)
            return
        bot.send_message(ADMIN_ID, not_found_string)
    else:
        bot.send_message(ADMIN_ID, wrong_input_string, parse_mode="MARKDOWN")


# Define the handler for the /stop command
@bot.message_handler(commands=["stop"])
def handle_stop_command(message):
    if message.from_user.id == ADMIN_ID:
        bot.reply_to(message, "Stopping the script...")
        bot.stop_polling()



"""=======================HANDLERS======================="""


# Define the handler for the /start command
@bot.message_handler(commands=["start"])
def handle_start_command(message):
    user = message.from_user

    if is_user_blacklisted(user.id):
        return

    # –ï—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è –∏ –≤—ã—Ö–æ–¥–∏–º, –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
    if is_user_exists(user.id):
        bot.send_message(message.chat.id, "–ú–∞–≥–¥—ã—á –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üí™üíÖ")  # –º–± –≤—ã–¥–∞–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        return

    welcome_string = f"{user.first_name}, —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º ü§ù\n\n" \
                     f"–ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {NEW_USER_BALANCE//1000}–∫ —Ç–æ–∫–µ–Ω–æ–≤ ü§ë\n\n" \
                     f"–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/balance - –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤\n" \
                     f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n/prompt - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n\n" \
                     f"/invite –∏–ª–∏ /ref - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å üéÅ"
    bot.send_message(message.chat.id, welcome_string)

    new_referral_string = ""
    referrer = extract_arguments(message.text)
    if referrer and referrer.isdigit() and is_user_exists(int(referrer)) and not is_user_blacklisted(int(referrer)):
        referrer = int(referrer)
        invited_by_string = f"–û–≥–æ, —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª ü§©{data[referrer]['name']}ü§©\n\n" \
                            f"–ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ +{str(REFERRAL_BONUS)} —Ç–æ–∫–µ–Ω–æ–≤! üéâ"
        time.sleep(1.5)
        bot.send_message(message.chat.id, invited_by_string)

        data[referrer]["balance"] += REFERRAL_BONUS
        ref_notification_string = f"–û–≥–æ, –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ü§©{user.full_name}ü§©\n\n" \
                                  f"–≠—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ª–∞–π–∫–∞ –∏ +{str(REFERRAL_BONUS)} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å—á–µ—Ç! üéâ"
        bot.send_message(referrer, ref_notification_string)

        new_referral_string = f"{data[referrer]['name']} {data[referrer]['username']} –ø—Ä–∏–≥–ª–∞—Å–∏–ª {user.full_name} ü§ù\n"
    else:
        referrer = None

    add_new_user(user.id, user.first_name, user.username, referrer)
    update_json_file(data)

    new_user_log = f"\n–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} " \
                   f"@{user.username} {user.id}!"
    print(new_referral_string + new_user_log)
    bot.send_message(ADMIN_ID, new_referral_string + new_user_log)


# Define the handler for the /help command
@bot.message_handler(commands=["help"])
def handle_help_command(message):

    if is_user_blacklisted(message.from_user.id):
        return

    help_string = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n" \
                  "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–≤—ã –∑–¥–µ—Å—å)\n" \
                  "/invite - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å üéÅ\n\n" \
                  "/balance - –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n" \
                  "/prompt - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n" \
                  "/reset_prompt - –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
    bot.reply_to(message, help_string)


# Define the handler for the /ref command
@bot.message_handler(commands=["ref", "invite"])
def handle_ref_command(message):
    user_id = message.from_user.id

    if is_user_blacklisted(user_id):
        return

    if is_user_exists(user_id):
        ref_string = f"–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –ø–æ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ —Ä–∞–∑–¥–µ–ª–∏ —Å –Ω–∏–º üéÅ*{REFERRAL_BONUS*2}*üéÅ " \
                     f"—Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –¥–≤–æ–∏—Ö!\n\n" \
                     f"*–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* \n" \
                     f"`https://t.me/{bot.get_me().username}?start={user_id}`\n\n" \
                     f"–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—â–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ —Ç–∞–∫ –ª–µ–≥–∫–æ! ü§ë"
        bot.reply_to(message, ref_string, parse_mode="Markdown")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")


# Define the handler for the /balance command
@bot.message_handler(commands=["balance"])
def handle_balance_command(message):
    user_id = message.from_user.id

    if is_user_blacklisted(user_id):
        return

    # –ï—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –≤—ã–¥–∞–µ–º –µ–≥–æ –±–∞–ª–∞–Ω—Å, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if is_user_exists(user_id):
        balance = data[user_id]["balance"]
        bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")


# Define the handler for the /stats command
@bot.message_handler(commands=["stats"])
def handle_stats_command(message):
    user_id = message.from_user.id

    if is_user_blacklisted(user_id):
        return

    # –ï—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –≤—ã–¥–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if is_user_exists(user_id):
        user_stats = data[user_id]["requests"], data[user_id]["tokens"], data[user_id]["lastdate"]
        bot.reply_to(message, f"–ó–∞–ø—Ä–æ—Å–æ–≤: {user_stats[0]}\n"
                              f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_stats[1]}")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")


# Define the handler for the /prompt command
@bot.message_handler(commands=["prompt"])
def handle_prompt_command(message):
    user = message.from_user
    answer = ""

    if is_user_blacklisted(user.id):
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /prompt)
    prompt = extract_arguments(message.text)

    # –ï—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if is_user_exists(user.id):
        if prompt:
            data[user.id]["prompt"] = prompt
            update_json_file(data)
            bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç: `{prompt}`", parse_mode="Markdown")
            print("\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç: " + prompt)
        else:
            if "prompt" in data[user.id]:
                answer = f"*–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:* `{str(data[user.id]['prompt'])}`\n\n"

            answer += "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–º–µ—Å—Ç–µ "\
                      "—Å –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø—Ä–∏–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞. \n\n"\
                      "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/prompt`"\
                      " –∏ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: \n\n"\
                      "`/prompt –¢—ã YodaGPT - AI –º–æ–¥–µ–ª—å, "\
                      "–∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Å—Ç–∏–ª–µ –ô–æ–¥—ã –∏–∑ Star Wars`"

            bot.reply_to(message, answer,  parse_mode="Markdown")
            print("\nNo text provided.")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")


# Define the handler for the /reset_prompt command
@bot.message_handler(commands=["reset_prompt"])
def handle_reset_prompt_command(message):
    user = message.from_user

    if is_user_blacklisted(user.id):
        return

    # –ï—Å–ª–∏ —é–∑–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç, –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if is_user_exists(user.id):
        if data[user.id].get("prompt") is not None:
            del data[user.id]["prompt"]
            update_json_file(data)
            bot.reply_to(message, f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            print("\n–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            bot.reply_to(message, f"–£ –≤–∞—Å —É–∂–µ —Å—Ç–æ–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç!")
            print("\n–£ –≤–∞—Å —É–∂–µ —Å—Ç–æ–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç!")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")


# Define the message handler for incoming messages
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global session_tokens, request_number, data
    user = message.from_user

    if is_user_blacklisted(user.id):
        return

    # –ï—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –æ—Ç–≤–µ—Ç –±–æ—Ç—É –¥—Ä—É–≥–æ–≥–æ —é–∑–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, —Ç–æ –≤—ã—Ö–æ–¥–∏–º, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (issue #27)
    if message.reply_to_message is not None and message.reply_to_message.from_user.id != bot.get_me().id:
        print(f"\nUser {user.full_name} @{user.username} replied to another user, skip")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if not is_user_exists(user.id):
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    if data[user.id]["balance"] <= 0:
        bot.reply_to(message, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
        return

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞, –ø–æ–∫–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
    bot.send_chat_action(message.chat.id, "typing")

    # Send the user's message to OpenAI API and get the response
    # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å
    try:
        if message.reply_to_message is not None and message.reply_to_message.from_user.id == bot.get_me().id:
            response = call_chatgpt(message.text, message.reply_to_message.text, get_user_prompt(user.id))
        else:
            response = call_chatgpt(message.text, system_prompt=get_user_prompt(user.id))
    except openai.error.RateLimitError:
        print("\n–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!")
        bot.reply_to(message, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ê–ü–ò –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    request_tokens = response["usage"]["total_tokens"]  # same: response.usage.total_tokens
    session_tokens += request_tokens
    request_number += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    data["global"]["tokens"] += request_tokens
    data["global"]["requests"] += 1

    # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∞–¥–º–∏–Ω, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞
    if user.id != ADMIN_ID:
        data[user.id]["balance"] -= request_tokens

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    data[user.id]["tokens"] += request_tokens
    data[user.id]["requests"] += 1
    data[user.id]["lastdate"] = datetime.datetime.now().strftime(DATE_FORMAT)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ—É –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ç–æ–∫–µ–Ω–∞—Ö –≤ —Ñ–∞–π–ª
    update_json_file(data)

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö
    request_price = request_tokens * PRICE_CENTS

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –¥–ª—è —é–∑–µ—Ä–∞ –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    user_log = ""  # \n\n–ë–∏–ø-–±–æ–ø

    # Send the response back to the user, but check for `parse_mode` errors
    if message.chat.type == "private":
        try:
            bot.send_message(message.chat.id, response.choices[0].message.content + user_log, parse_mode="Markdown")
        except telebot.apihelper.ApiTelegramException:
            print(f"\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑-–∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ –Ω–µ–≥–æ")
            bot.send_message(message.chat.id, response.choices[0].message.content + user_log)
    else:
        try:
            bot.reply_to(message, response.choices[0].message.content + user_log, parse_mode="Markdown")
        except telebot.apihelper.ApiTelegramException:
            print(f"\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑-–∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ –Ω–µ–≥–æ")
            bot.reply_to(message, response.choices[0].message.content + user_log)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_log = (f"–ó–∞–ø—Ä–æ—Å {request_number}: {request_tokens} –∑–∞ ¬¢{round(request_price, 3)}\n"
                 f"–°–µ—Å—Å–∏—è: {session_tokens} –∑–∞ ¬¢{round(session_tokens * PRICE_CENTS, 3)}\n"
                 f"–Æ–∑–µ—Ä: {user.full_name} "
                 f"@{user.username} {user.id}\n"
                 f"–ß–∞—Ç: {message.chat.title} {message.chat.id}"
                 f"\n{data['global']} ¬¢{round(data['global']['tokens'] * PRICE_CENTS, 3)}")

    # –ü–∏—à–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\n" + admin_log)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω—É –≤ —Ç–≥
    if message.chat.id != ADMIN_ID:
        bot.send_message(ADMIN_ID, admin_log)


# Start the bot
print("---—Ä–∞–±–æ—Ç–∞–µ–º---")
bot.infinity_polling()

# –î–µ–ª–∞–µ–º –±—ç–∫–∞–ø –±–¥ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
update_json_file(data, BACKUPFILE)
bot.send_message(ADMIN_ID, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
