import telebot
import openai
from dotenv.main import load_dotenv
import json
import os
import datetime


prompt = "You are a helpful assistant."  # "You are Marv - a sarcastic reluctant assistant."
price_1k = 0.002  # price per 1k rokens in USD
date_format = "%d-%m-%Y %H:%M:%S"  # date format %d.%m.%Y %H:%M:%S


# load .env file with secrets
load_dotenv()

# Load OpenAI API credentials from .env file
openai.api_key = os.getenv("OPENAI_API_KEY")

# Create a new Telebot instance
bot = telebot.TeleBot(os.getenv("TELEGRAM_API_KEY"))

# –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤ –ª—Å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ª–æ–≥–∏
admin_id = int(os.getenv("ADMIN_ID"))

# File with users and global token usage data
datafile = "data.json"


"""======================FUNCTIONS======================="""


# Function to check if the user is in the data file
def is_user_exists(user_id: int) -> bool:
    if user_id in data:
        return True
    else:
        return False


# Function to add new user to the data file
def add_new_user(user_id: int) -> None:
    data[user_id] = default_data.copy()


# Function to update the JSON file with relevant data
def update_json_file(new_data) -> None:
    with open(datafile, "w") as file:
        json.dump(new_data, file, indent=4)


"""======================SOME_CODE======================="""  # kek


# Check if the file exists
if os.path.isfile(datafile):
    # Read the contents of the file
    with open(datafile, "r") as f:
        data = json.load(f)

    # Convert keys to integers (except for the first key)
    for key in list(data.keys())[1:]:
        data[int(key)] = data.pop(key)
else:
    data = {"global": {"requests": 0, "tokens": 0},
            admin_id: {"requests": 0, "tokens": 0, "balance": 777777, "lastdate": "07-05-2023 00:00:00"}}
    # Create the file with default values
    update_json_file(data)

# Default values for new users, who are not in the data file
default_data = {"requests": 0, "tokens": 0, "balance": 30000, "lastdate": "07-05-2023 00:00:00"}


# Calculate the price per token in cents
price_cents = price_1k / 10

# Session token and request counters
session_tokens, request_number = 0, 0


"""=======================HANDLERS======================="""


# Define the handler for the /start command
@bot.message_handler(commands=["start"])
def handle_start_command(message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è –∏ –≤—ã—Ö–æ–¥–∏–º, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
    if is_user_exists(user_id):
        bot.send_message(message.chat.id, "–ú–∞–≥–¥—ã—á –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üí™")  # –º–± –≤—ã–¥–∞–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –ø—É–ª–∞
        return
    else:
        add_new_user(user_id)
        update_json_file(data)

        welcome_string = f"{message.from_user.first_name}, —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º ü§ù\n\n" \
                         f"–ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 30–∫ —Ç–æ–∫–µ–Ω–æ–≤ ü§ë\n\n" \
                         f"–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n/balance - –±–∞–ª–∞–Ω—Å\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        bot.send_message(message.chat.id, welcome_string)

        new_user_string = f"\n–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} " \
                          f"@{message.from_user.username} {message.from_user.id}"
        print(new_user_string)
        bot.send_message(admin_id, new_user_string)


# Define the handler for the /stop command
@bot.message_handler(commands=["stop"])
def handle_stop_command(message):
    if message.from_user.id == admin_id:
        bot.reply_to(message, "Stopping the script...")
        bot.stop_polling()
    else:
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–æ—Ç–∞")


# Define the handler for the /balance command
@bot.message_handler(commands=["balance"])
def handle_balance_command(message):
    if message.from_user.id not in data:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
    balance = data[message.from_user.id]["balance"]
    bot.reply_to(message, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤")


# Define the handler for the /stats command
@bot.message_handler(commands=["stats"])
def handle_stats_command(message):
    if message.from_user.id not in data:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
    user_stats = data[message.from_user.id]["requests"], \
        data[message.from_user.id]["tokens"], data[message.from_user.id]["lastdate"]
    bot.reply_to(message, f"–ó–∞–ø—Ä–æ—Å–æ–≤: {user_stats[0]}\n"
                          f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_stats[1]}\n"
                          f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {user_stats[2]}")


# Define the message handler for incoming messages
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global session_tokens, request_number, prompt, data

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if message.from_user.id not in data:
        data[message.from_user.id] = default_data.copy()
        new_user_string = f"\n–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} " \
                          f"@{message.from_user.username} {message.from_user.id}"
        print(new_user_string)
        bot.send_message(admin_id, new_user_string)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ñ–∞–π–ª
        with open(datafile, "w") as f:
            json.dump(data, f, indent=4)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
    if data[message.from_user.id]["balance"] <= 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
        return

    # Send the user's message to OpenAI API and get the response. System message is for chat context (in the future)
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            max_tokens=3000,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": message.text},
            ]
        )
    except openai.error.RateLimitError:
        print("\n–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!")
        bot.send_message(message.chat.id, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ–∫—É–Ω–¥ —á–µ—Ä–µ–∑ 20")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ê–ü–ò –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    request_tokens = response["usage"]["total_tokens"]  # same: response.usage.total_tokens
    session_tokens += request_tokens
    request_number += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    data["global"]["tokens"] += request_tokens
    data["global"]["requests"] += 1

    # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∞–¥–º–∏–Ω, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞
    if message.from_user.id != admin_id:
        data[message.from_user.id]["balance"] -= request_tokens

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    data[message.from_user.id]["tokens"] += request_tokens
    data[message.from_user.id]["requests"] += 1
    data[message.from_user.id]["lastdate"] = datetime.datetime.now().strftime(date_format)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ—É –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ç–æ–∫–µ–Ω–∞—Ö –≤ —Ñ–∞–π–ª
    with open(datafile, "w") as f:
        json.dump(data, f, indent=4)

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö
    request_price = request_tokens * price_cents

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –¥–ª—è —é–∑–µ—Ä–∞
    user_log = f"\n\n\n–¢–æ–∫–µ–Ω—ã: {request_tokens} –∑–∞ ¬¢{round(request_price, 3)}. " \
               f"\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ¬¢{round(session_tokens * price_cents, 3)}"

    # Send the response back to the user
    if message.chat.type == "private":
        bot.send_message(message.chat.id, response.choices[0].message.content + user_log)
    else:
        bot.reply_to(message, response.choices[0].message.content + user_log)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_log = (f"–ó–∞–ø—Ä–æ—Å {request_number}: {request_tokens} –∑–∞ ¬¢{round(request_price, 3)}\n"
                 f"–°–µ—Å—Å–∏—è: {session_tokens} –∑–∞ ¬¢{round(session_tokens * price_cents, 3)}\n"
                 f"–Æ–∑–µ—Ä: {message.from_user.full_name} "
                 f"@{message.from_user.username} {message.from_user.id}\n"
                 f"–ß–∞—Ç: {message.chat.title} {message.chat.id}"
                 f"\n{data['global']} ¬¢{round(data['global']['tokens'] * price_cents, 3)}")

    # –ü–∏—à–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\n" + admin_log)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω—É –≤ —Ç–≥
    if message.chat.id != admin_id:
        bot.send_message(admin_id, admin_log)


# Start the bot
print("---—Ä–∞–±–æ—Ç–∞–µ–º---")
bot.infinity_polling()

# –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
bot.send_message(admin_id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
